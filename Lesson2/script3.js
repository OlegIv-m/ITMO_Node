// 3*. Необходимо реализовать шаблон позволяющий: 
// - регистрировать события с использованием функции on(eventName, function);
// - генерировать событие с помощью функции emit(eventName) и по наступлению события запускать функции обработчики.

// Задача доделать код, чтобы он работал как ожидается:
/* eventsObj объект хранения в виде ключ (название события) / значение (массив 
функций обработчиков, привязанных к данному событию) */
const EventEmitter  = require('events');

let Event = new EventEmitter();

const eventsObj = {};
 
on('eat', stringData => {
    console.log('Первым: Я кушаю  ' + stringData + '.');
});

on('eat', stringData => {
    console.log('Вторым: Я кушаю  ' + stringData + '.');
});

setTimeout(() => {
    emit('eat', 'бутерброд');
}, 3000);

setTimeout(() => {
    emit('eat', 'мясо');
}, 2000);

setTimeout(() => {
    emit('eat', 'яблочко');
}, 500);

 
function on(eventName, callback) {
    //Инициализируем пустой массив обработчиков у регистрируемого события
    eventsObj[eventName] = eventsObj[eventName] || [];
    //Здесь нужно положить функцию обратного вызова в соответствующий массив
    //Здесь нужен ваш код
	Event.on(eventName,callback);
}
 
function emit(eventName, stringData) {
    //Здесь необходимо запустить каждую функцию обработчик относящиеся к данному событию
    //Здесь нужен ваш код
	Event.emit(eventName, stringData);
}

// Ожидаемый результат, выводимый в консоль:
// Первым: Я кушаю яблочко.
// Вторым: Я кушаю яблочко.
// Первым: Я кушаю мясо.
// Вторым: Я кушаю мясо.
// Первым: Я кушаю бутерброд.
// Вторым: Я кушаю бутерброд.    